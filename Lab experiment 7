#include<stdio.h>
#include<stdlib.h>
typedef struct Node{
    int data;
    struct Node* next;
} Node;
Node* head = NULL;
void insertNodeInBeg(int ele){
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->next = ele;
    newNode->next = NULL;
    newNode->next = head;
    head = newNode;
    printf("Node Inserted !!!\n");

}
void display(){
    if(head == NULL)
    printf("List is empty !!!\n");
    else{
        Node* temp = head;
        while(temp != NULL){
            printf("%d", temp->data);
            temp = temp->next;

    }
}
}
int main(){
    while(1){
        printf("----Single Linked List-----\n");
        printf("1. Insert Node In Begining\n");
        printf("2. Insert Node in end\n");
        printf("3. Insert Node at any position\n");
        printf("4. Delete node from Begining\n");
        printf("5. Delete node from End\n ");
        printf("6. Delete node from any position\n");
        printf("7. Search element in List\n");
        printf("8. Sort elements\n");
        printf("9. Display list\n");
        printf("10. exit\n");
        int choice, value;
        printf("Enter choice:");
        scanf("%d", &choice);
        switch(choice){
            case 1:
            printf("enter value: ")
            scanf("%d", &value);
            insertNodeInBeg(value);
            break;
            case 2:
            break;
            case 3:
            break;
            case 4:
            break;
            case 5:
            break;
            case 6: 
            break;
            case 7:
            break;
            case 8:
            break;
            case 9:
            break;
            case 10:
            exit(0);
            default:
            printf("Invalid choice!!!\n");
        }

    }
    return 0;
}
 //Algo
 //1. Create a node
 //2. Check if linked list is empty or not
 //3. If linked list is empty, then assign the address of new node to head
 //4. If linked list is not empty, then assign the value of head in newNode->next = head 
 //b) Assign the address of newNode to 

 //Algo : Traversing
